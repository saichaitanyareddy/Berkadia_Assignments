Event Bubbling:
	Event bubbling process starts with the element that triggered the event and then bubbles up to the containing elements in the hierachy.
	If an event handler is set for that object, the event is triggered
	If no event handler is set for that object, the event bubbles up (like a bubble in water) to the objects parent
	The event bubbles up from parent to parent until it is handled, or until it reaches the document object.


Event Delegation:Capturing and bubbling allow us to implement one of most powerful event handling patterns called event delegation.
	If we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them – we put a single handler on their common ancestor.

	In the handler we get event.target, see where the event actually happened and handle it.
	Advantages of Event Delegation:
		Simplifies initialization and saves memory: no need to add many handlers.
		Less code: when adding or removing elements, no need to add/remove handlers.
		DOM modifications: we can mass add/remove elements with innerHTML and alike.

Example:
<ul onclick="alert(event.type + '!')">
    <li>One</li>
    <li>Two</li>
    <li>Three</li>
</ul>

If we click on any one of the list element the event occurs.
